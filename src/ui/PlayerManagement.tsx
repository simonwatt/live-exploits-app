import { useState } from 'react';
import { Title, Paper, Table, Button, Loader, Group, ActionIcon, TextInput, Pagination, Badge, Rating, Avatar } from '@mantine/core';
import { IconEye, IconEdit, IconArrowUp, IconArrowDown, IconArrowLeft } from '@tabler/icons-react';
import { usePagination } from '@mantine/hooks';
import { usePlayerContext } from '../contexts/PlayerContext';
import PlayerForm from './PlayerForm';
import PlayerDetails from './PlayerDetails';

// Helper function to get initials from the name
const getInitials = (name) => {
  if (!name) return '';
  const nameParts = name.trim().split(' ');
  const initials = nameParts.map((part) => part[0].toUpperCase()).join('');
  return initials.slice(0, 2); // Use the first two initials
};

export function PlayerManagement() {
  const { state } = usePlayerContext();
  const { players, tags, tagsLoaded } = state;
  const [selectedPlayer, setSelectedPlayer] = useState(null);
  const [isEditing, setIsEditing] = useState(false);
  const [filter, setFilter] = useState(''); // Filter by player name
  const [sortConfig, setSortConfig] = useState({ key: 'name', direction: 'asc' });

  const handleSort = (key) => {
    let direction = 'asc';
    if (sortConfig.key === key && sortConfig.direction === 'asc') {
      direction = 'desc';
    }
    setSortConfig({ key, direction });
  };

  // Sort the players based on the sort configuration (ability added)
  const sortedPlayers = [...players].sort((a, b) => {
    const aValue = a[sortConfig.key] || 0; // Default to 0 if ability or name is missing
    const bValue = b[sortConfig.key] || 0;

    if (aValue < bValue) return sortConfig.direction === 'asc' ? -1 : 1;
    if (aValue > bValue) return sortConfig.direction === 'asc' ? 1 : -1;
    return 0;
  });

  // Apply filter to all players before pagination
  const filteredPlayers = sortedPlayers.filter((player) =>
    player.name.toLowerCase().includes(filter.toLowerCase())
  );

  // Calculate total pages based on filtered players
  const totalPages = Math.ceil(filteredPlayers.length / 10);

  // Set up pagination
  const pagination = usePagination({
    total: totalPages, // Dynamically calculated based on filtered players
    initialPage: 1,
  });

  // Get paginated players based on the current page
  const paginatedPlayers = filteredPlayers.slice(
    (pagination.active - 1) * 10,
    pagination.active * 10
  );

  const handlePlayerClick = (player, mode) => {
    setSelectedPlayer(player);
    setIsEditing(mode === 'edit');
  };

  const handleNewPlayer = () => {
    setSelectedPlayer(null); // Signal new player creation
    setIsEditing(true); // Switch to editing mode for creating a new player
  };

  const handleBackClick = () => {
    setSelectedPlayer(null); // Clear selected player
    setIsEditing(false); // Go back to list view
  };

  return (
    <>
      <Title order={2} style={{ marginTop: -20 }}>
        Players
      </Title>

      <Paper shadow="xs" p="md" mb="md">
        {!isEditing && !selectedPlayer && (
          <>
            <Group position="apart">
              <Button variant="outline" onClick={handleNewPlayer} style={{ marginBottom: 10 }}>
                New Player
              </Button>

              <TextInput
                placeholder="Filter by name"
                value={filter}
                onChange={(event) => {
                  setFilter(event.currentTarget.value);
                  pagination.setPage(1); // Reset to page 1 when filtering
                }}
                style={{ width: 200 }}
              />
            </Group>

            {/* Player Table */}
            <Table>
              <thead>
                <tr>
                  <th></th> {/* Empty header for the avatar */}
                  <th onClick={() => handleSort('name')}>
                    Name {sortConfig.key === 'name' && (sortConfig.direction === 'asc' ? <IconArrowUp size={14} /> : <IconArrowDown size={14} />)}
                  </th>
                  <th onClick={() => handleSort('visualDescription')}>
                    Physical Description {sortConfig.key === 'visualDescription' && (sortConfig.direction === 'asc' ? <IconArrowUp size={14} /> : <IconArrowDown size={14} />)}
                  </th>
                  <th>Tags</th>
                 
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody>
                {paginatedPlayers.map((player) => (
                  <tr 
                    key={player.id} 
                    onClick={() => handlePlayerClick(player, 'view')}  // Add onClick to row
                    style={{ cursor: 'pointer' }}  // Add cursor style to indicate clickable row
                  >
                    <td>
                      {/* Avatar component */}
                      <Avatar 
                        src={player.image} 
                        alt={player.name}
                        radius="xl"
                        color="blue"
                      >
                        {!player.image && getInitials(player.name)} {/* Display initials if no image */}
                      </Avatar>
                    </td>
                    <td>{player.name}</td>
                    <td>{player.visualDescription || '-'}</td> {/* Display '-' if no visual description */}
                    <td>
                      {player.playerTags && player.playerTags.length > 0 ? (
                        <Group spacing="xs">
                          {player.playerTags.map((tag) => (
                            <Badge key={tag.tagId} color="blue" variant="light">
                              {tag.tag.name}
                            </Badge>
                          ))}
                        </Group>
                      ) : (
                        '-'  // Display '-' if no tags
                      )}
                    </td>
               
                    <td>
                      <Group spacing="xs">
                        <ActionIcon
                          color="blue"
                          onClick={(e) => {
                            e.stopPropagation();  // Prevent row click from firing
                            handlePlayerClick(player, 'view');
                          }}
                          title="View Player"
                        >
                          <IconEye size={18} />
                        </ActionIcon>
                        <ActionIcon
                          color="green"
                          onClick={(e) => {
                            e.stopPropagation();  // Prevent row click from firing
                            handlePlayerClick(player, 'edit');
                          }}
                          title="Edit Player"
                        >
                          <IconEdit size={18} />
                        </ActionIcon>
                      </Group>
                    </td>
                  </tr>
                ))}
              </tbody>
            </Table>

            {/* Pagination Component */}
            <Pagination
              page={pagination.active}
              onChange={pagination.setPage}
              total={totalPages} // Dynamically calculated total pages
              mt="md"
            />

            {!tagsLoaded && <Loader />} {/* Show loader while tags are being loaded */}
          </>
        )}

        {/* Conditionally render the PlayerForm or PlayerDetails based on state */}
        {isEditing || selectedPlayer ? (
          <>
            <Button
              leftIcon={<IconArrowLeft size={16} />}
              variant="outline"
              onClick={handleBackClick}
              style={{ marginBottom: 10 }}
            >
              Back
            </Button>
            {isEditing ? (
              <PlayerForm player={selectedPlayer} />
            ) : (
              <PlayerDetails player={selectedPlayer} onEdit={() => setIsEditing(true)} />
            )}
          </>
        ) : null}
      </Paper>
    </>
  );
}

export default PlayerManagement;
