import { useState, useEffect } from 'react';
import {
  Text,
  Button,
  Group,
  List,
  Textarea,
  ActionIcon,
  Modal,
  Box,
  Select,
  NumberInput,
} from '@mantine/core';
import { IconEdit, IconTrash, IconPlus } from '@tabler/icons-react';
import { usePlayerContext } from '../contexts/PlayerContext';
import apiClient from '../utils/apiClient';

const NotesEditor = ({ playerId, player }) => {
  const { state, addNote, updateNote, deleteNote } = usePlayerContext();
  const notes = state.notes.filter((note) => note.playerId === playerId);

  const [modalOpened, setModalOpened] = useState(false);
  const [isEditing, setIsEditing] = useState(false);
  const [currentNote, setCurrentNote] = useState(null);

  // Form state for note fields
  const [noteContent, setNoteContent] = useState('');
  const [tellId, setTellId] = useState(null);
  const [strategyId, setStrategyId] = useState(null);
  const [handHistory, setHandHistory] = useState('');
  const [confidenceLevel, setConfidenceLevel] = useState(5);

  // State for tells and strategies
  const [tells, setTells] = useState([]);
  const [strategies, setStrategies] = useState([]);

  const playerName = player.name;

  useEffect(() => {
    const fetchTells = async () => {
      try {
        const response = await apiClient.get('/tell');
        setTells(response.data);
      } catch (error) {
        console.error('Error fetching tells:', error);
      }
    };

    const fetchStrategies = async () => {
      try {
        const response = await apiClient.get('/strategy');
        setStrategies(response.data);
      } catch (error) {
        console.error('Error fetching strategies:', error);
      }
    };

    fetchTells();
    fetchStrategies();
  }, []);

  // Function to open the modal for adding a new note
  const handleAddNote = () => {
    setIsEditing(false);
    resetFormFields();
    setModalOpened(true);
  };

  // Function to open the modal for editing a note
  const handleEditNote = (note) => {
    setIsEditing(true);
    setCurrentNote(note);
    setNoteContent(note.content);
    setTellId(note.tellId || null);
    setStrategyId(note.strategyId || null);
    setHandHistory(note.handHistory || '');
    setConfidenceLevel(note.confidenceLevel || 5);
    setModalOpened(true);
  };

  // Function to reset form fields
  const resetFormFields = () => {
    setNoteContent('');
    setTellId(null);
    setStrategyId(null);
    setHandHistory('');
    setConfidenceLevel(5);
  };

  // Function to save a new note
  const handleSaveNote = async () => {
    const currentUser = 'CurrentUser'; // Replace with actual user ID or username

    const noteData = {
      playerId: playerId,
      content: noteContent,
      tellId: tellId,
      strategyId: strategyId,
      handHistory: handHistory,
      confidenceLevel: confidenceLevel,
      highlight: false,
      createdBy: currentUser,
      updatedBy: currentUser,
    };

    try {
      await addNote(noteData);
      setModalOpened(false);
    } catch (error) {
      console.error('Error saving note:', error);
      // Handle error (e.g., show notification)
    }
  };

  // Function to update an existing note
  const handleUpdateNote = async () => {
    const currentUser = 'CurrentUser'; // Replace with actual user ID or username

    const updatedNoteData = {
      ...currentNote,
      content: noteContent,
      tellId: tellId,
      strategyId: strategyId,
      handHistory: handHistory,
      confidenceLevel: confidenceLevel,
      updatedBy: currentUser,
    };

    try {
      await updateNote(updatedNoteData);
      setModalOpened(false);
      setCurrentNote(null);
    } catch (error) {
      console.error('Error updating note:', error);
      // Handle error
    }
  };

  // Function to delete a note
  const handleDeleteNote = async (noteId) => {
    try {
      await deleteNote(noteId);
    } catch (error) {
      console.error('Error deleting note:', error);
      // Handle error
    }
  };

  return (
    <>
      <Group position="apart">
        <Text size="lg" weight={500}>
          Notes
        </Text>
        <Button
          leftIcon={<IconPlus size={16} />}
          onClick={handleAddNote}
          variant="light"
          size="xs"
        >
          Add Note
        </Button>
      </Group>

      {/* Notes List */}
      {notes && notes.length > 0 ? (
        <List spacing="sm" mt="md">
          {notes
            .slice()
            .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))
            .map((note) => (
              <List.Item key={note.id}>
                <Box style={{ display: 'flex', alignItems: 'flex-start' }}>
                  <div style={{ flex: 1 }}>
                    <Text>{note.content}</Text>
                    <Text size="xs" color="dimmed">
                      Confidence Level: {note.confidenceLevel}
                    </Text>
                    {note.handHistory && (
                      <Text size="xs" color="dimmed">
                        Hand History: {note.handHistory}
                      </Text>
                    )}
                    <Text size="xs" color="dimmed">
                      {`Created by ${note.createdBy} on ${new Date(
                        note.createdAt
                      ).toLocaleDateString()}`}
                    </Text>
                    {note.updatedAt && (
                      <Text size="xs" color="dimmed">
                        {`Updated by ${note.updatedBy} on ${new Date(
                          note.updatedAt
                        ).toLocaleDateString()}`}
                      </Text>
                    )}
                  </div>
                  <Group spacing="xs" ml="sm">
                    <ActionIcon color="blue" onClick={() => handleEditNote(note)}>
                      <IconEdit size={16} />
                    </ActionIcon>
                    <ActionIcon color="red" onClick={() => handleDeleteNote(note.id)}>
                      <IconTrash size={16} />
                    </ActionIcon>
                  </Group>
                </Box>
              </List.Item>
            ))}
        </List>
      ) : (
        <Text size="sm" color="dimmed" mt="md">
          No notes
        </Text>
      )}

      {/* Add/Edit Note Modal */}
      <Modal
        opened={modalOpened}
        onClose={() => setModalOpened(false)}
        title={isEditing ? 'Edit Note' : `Add New Note for ${playerName}`}
      >
        <Textarea
          label="Content"
          placeholder="Enter your note here..."
          value={noteContent}
          onChange={(event) => setNoteContent(event.currentTarget.value)}
          minRows={4}
          required
        />

        {/* Select for picking a Tell */}
        <Select
          label="Tell"
          placeholder="Select a tell"
          data={tells.map((tell) => ({ value: tell.id, label: tell.name }))}
          value={tellId}
          onChange={(value) => setTellId(value)}
          mt="md"
        />

        {/* Select for picking a Strategy */}
        <Select
          label="Strategy"
          placeholder="Select a strategy"
          data={strategies.map((strategy) => ({ value: strategy.id, label: strategy.name }))}
          value={strategyId}
          onChange={(value) => setStrategyId(value)}
          mt="md"
        />

        {/* Input for Hand History */}
        <Textarea
          label="Hand History"
          placeholder="Enter hand history or URL"
          value={handHistory}
          onChange={(event) => setHandHistory(event.currentTarget.value)}
          minRows={2}
          mt="md"
        />

        {/* Confidence Level */}
        <NumberInput
          label="Confidence Level"
          value={confidenceLevel}
          onChange={(value) => setConfidenceLevel(value)}
          min={1}
          max={10}
          mt="md"
        />

        <Group position="right" mt="md">
          <Button onClick={() => setModalOpened(false)} variant="default">
            Cancel
          </Button>
          <Button onClick={isEditing ? handleUpdateNote : handleSaveNote}>
            {isEditing ? 'Update' : 'Save'}
          </Button>
        </Group>
      </Modal>
    </>
  );
};

export default NotesEditor;
