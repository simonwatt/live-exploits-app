import React, { useEffect, useState } from 'react';
import { useForm } from '@mantine/form';
import { TextInput, Textarea, TagsInput, Group, Button, List, Rating, Text, Select } from '@mantine/core';
import { usePlayerContext } from '../contexts/PlayerContext';
import apiClient from '../utils/apiClient';

const PlayerForm = ({ player, isViewMode }) => {  
  const { state, savePlayer } = usePlayerContext();
  const { tags } = state;

  const [availableTags, setAvailableTags] = useState(tags);
  const [newTags, setNewTags] = useState([]);
  const [newNote, setNewNote] = useState(''); 

  const form = useForm({
    initialValues: {
      id: 0,
      name: '',
      description: '',
      abilityRating: 0,
      tiltControl: 0,
      mentalDescription: '',
      visualDescription: '',
      image: '',
      favouriteHands: '',
      playerTags: [],
      ethnicity: '',        
      skinColor: '',
      age: '',
      hairStyle: '',
      hairColor: '',
      gender: '',
      bodyType: '',
      height: '',
      createdBy: '',
      createdAt: new Date(),
      updatedAt: new Date(),
      updatedBy: '',
      notes: [], 
    },
    validate: {
      name: (value) => (value.trim().length > 0 ? null : 'Name is required'),
    },
  });

  useEffect(() => {
    if (player && player.id !== form.values.id) {
      form.setValues(player); 
    } else {
      form.reset(); 
      setNewNote(''); 
    }
  }, [player?.id]);

  const handleSubmit = async (values) => {
    try {
      // Ensure new tags are processed and submitted with the form
      const filteredNewTags = newTags.filter((tagName) =>
        values.playerTags.some((pt) => pt.tag.name === tagName)
      );

      const createdTags = await Promise.all(
        filteredNewTags.map(async (tagName) => {
          const response = await apiClient.post('/tag', { name: tagName });
          return response.data;
        })
      );

      const updatedTags = [...availableTags, ...createdTags];
      setAvailableTags(updatedTags);

      const playerTags = values.playerTags.map((pt) => {
        const tag = updatedTags.find((t) => t.name === pt.tag.name);
        return tag ? { tagId: tag.id, playerId: values.id } : pt;
      });

      const updatedPlayer = { ...values, playerTags };

      const response = player && player.id
        ? await apiClient.put(`/player/${player.id}`, updatedPlayer)
        : await apiClient.post('/player', updatedPlayer);

      savePlayer(response.data);
      alert('Player saved');
    } catch (error) {
      console.error('Error saving player:', error);
      alert('An error occurred while saving the player.');
    }
  };

  const handleNewTag = (tagName) => {
    if (!newTags.includes(tagName)) {
      setNewTags([...newTags, tagName]);
    }
    return tagName;
  };

  return (
    <form onSubmit={form.onSubmit(handleSubmit)}> {/* Ensure form submit is handled */}
      <TextInput label="Name" {...form.getInputProps('name')} withAsterisk />
      <TextInput label="Description" {...form.getInputProps('description')} />

      {/* Ability and Emotional Control */}
      <Group>
        <Text>Ability</Text>
        <Rating
          label="Ability Rating"
          value={form.values.abilityRating}
          fractions={2}
          onChange={(value) => form.setFieldValue('abilityRating', value)}
        />
      </Group>
      <Group>
        <Text>Emotional Control</Text>
        <Rating
          label="Emotional Control"
          value={form.values.tiltControl}
          fractions={2}
          onChange={(value) => form.setFieldValue('tiltControl', value)}
        />
      </Group>

      <Textarea label="Emotional Control - Notes" {...form.getInputProps('mentalDescription')} />
      <TextInput label="Physical Description" {...form.getInputProps('visualDescription')} />
      <TextInput label="Image URL" {...form.getInputProps('image')} />
      <TextInput label="Favourite Hands" {...form.getInputProps('favouriteHands')} />

      {/* Select Lists with Creatable and Searchable Options */}
      <Select
        label="Ethnicity"
        data={['African', 'Kiwi', 'Australian', 'European', 'Chinese', 'Korean', 'Russian', 'Indian']}
        searchable
        creatable
        getCreateLabel={(query) => `+ Create "${query}"`}
        onCreate={(query) => form.setFieldValue('ethnicity', query)}
        {...form.getInputProps('ethnicity')}
      />

      <Select
        label="Skin Color"
        data={['White', 'Light Brown', 'Medium Brown', 'Dark Brown', 'Black', 'Olive', 'Fair']}
        searchable
        creatable
        getCreateLabel={(query) => `+ Create "${query}"`}
        onCreate={(query) => form.setFieldValue('skinColor', query)}
        {...form.getInputProps('skinColor')}
      />

      <TextInput label="Age" {...form.getInputProps('age')} />

      <Select
        label="Hair Style"
        data={['Short', 'Long', 'Bald', 'Buzz Cut', 'Curly', 'Wavy', 'Straight', 'Shaved']}
        searchable
        creatable
        getCreateLabel={(query) => `+ Create "${query}"`}
        onCreate={(query) => form.setFieldValue('hairStyle', query)}
        {...form.getInputProps('hairStyle')}
      />

      <Select
        label="Hair Color"
        data={['Black', 'Brown', 'Blonde', 'Red', 'Gray', 'White', 'Dyed']}
        searchable
        creatable
        getCreateLabel={(query) => `+ Create "${query}"`}
        onCreate={(query) => form.setFieldValue('hairColor', query)}
        {...form.getInputProps('hairColor')}
      />

      <Select
        label="Gender"
        data={['Male', 'Female', 'Other']}
        searchable
        creatable
        getCreateLabel={(query) => `+ Create "${query}"`}
        onCreate={(query) => form.setFieldValue('gender', query)}
        {...form.getInputProps('gender')}
      />

      <Select
        label="Body Type"
        data={['Skinny', 'Normal', 'Athletic', 'Muscular', 'Overweight', 'Fat']}
        searchable
        creatable
        getCreateLabel={(query) => `+ Create "${query}"`}
        onCreate={(query) => form.setFieldValue('bodyType', query)}
        {...form.getInputProps('bodyType')}
      />

      <Select
        label="Height"
        data={['Short', 'Medium', 'Tall']}
        searchable
        creatable
        getCreateLabel={(query) => `+ Create "${query}"`}
        onCreate={(query) => form.setFieldValue('height', query)}
        {...form.getInputProps('height')}
      />

      {/* Tags Input */}
      <TagsInput
        label="Tags"
        value={(form.values.playerTags || []).map((pt) =>
          availableTags.find((tag) => tag.id === pt.tagId)?.name || pt.tag?.name || ''
        )}
        onChange={(selectedTags) => {
          const playerTags = selectedTags.map((tagName) => {
            const tag = availableTags.find((t) => t.name === tagName);
            if (!tag) {
              const createdTagName = handleNewTag(tagName);
              return { tag: { name: createdTagName }, playerId: player ? player.id : 0 };
            }
            return { tag: { name: tagName }, tagId: tag.id, playerId: player ? player.id : 0 };
          });
          form.setFieldValue('playerTags', playerTags);
        }}
        data={availableTags.map((tag) => ({ value: tag.name, label: tag.name }))}
        placeholder="Enter Tag"
      />

      {/* Submit Button */}
      {!isViewMode && (
        <Group position="right" mt="md">
          <Button type="submit"> {player && player.id ? 'Update Player' : 'Add Player'} </Button>
        </Group>
      )}
    </form>
  );
};

export default PlayerForm;
