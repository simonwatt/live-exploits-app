import React, { useEffect, useState } from 'react';
import { useForm } from '@mantine/form';
import { TextInput, NumberInput, Textarea, TagsInput, Group, Button } from '@mantine/core';
import { usePlayerContext } from '../contexts/PlayerContext';
import apiClient from '../utils/apiClient'; 

const PlayerForm = ({ player }) => {
  const { state, savePlayer } = usePlayerContext();
  const { tags } = state;

  const [availableTags, setAvailableTags] = useState(tags);
  const [newTags, setNewTags] = useState([]);

  const form = useForm({
    initialValues: {
      id: 0,
      name: '',
      description: '',
      abilityRating: 0,
      tiltControl: 0,
      mentalDescription: '',
      visualDescription: '',
      image: '',
      favouriteHands: '',
      playerTags: [],
    },
    validate: {
      name: (value) => (value.trim().length > 0 ? null : 'Name is required'),
    },
  });

  useEffect(() => {
    if (player && player.id !== form.values.id) {
      form.setValues(player);
    } else if (!player) {
      form.reset();
    }
  }, [player?.id]);

  const handleSubmit = async (values) => {
    try {
      // Filter out any removed tags from the newTags array
      const filteredNewTags = newTags.filter((tagName) =>
        values.playerTags.some((pt) => pt.tag.name === tagName)
      );

      // Create new tags that are entered by the user but not yet created on the server
      const createdTags = await Promise.all(
        filteredNewTags.map(async (tagName) => {
          const response = await apiClient.post('/tag', { name: tagName });
          return response.data;
        })
      );

      // Update the available tags with newly created ones
      const updatedTags = [...availableTags, ...createdTags];
      setAvailableTags(updatedTags);

      // Update player tags with correct IDs
      const playerTags = values.playerTags.map((pt) => {
        const tag = updatedTags.find((t) => t.name === pt.tag.name);
        return tag ? { tagId: tag.id, playerId: values.id } : pt;
      });

      const updatedPlayer = { ...values, playerTags };

      // Save player via PUT (update) or POST (create)
      const response = player && player.id
        ? await apiClient.put(`/player/${player.id}`, updatedPlayer)
        : await apiClient.post('/player', updatedPlayer);

      savePlayer(response.data); // Update the player in the global state
      alert('Player saved');
    } catch (error) {
      console.error('Error saving player:', error);
      alert('An error occurred while saving the player.');
    }
  };

  const handleNewTag = (tagName) => {
    if (!newTags.includes(tagName)) {
      setNewTags([...newTags, tagName]);
    }
    return tagName; // Return the tag so it shows in the TagsInput
  };

  return (
    <form onSubmit={form.onSubmit(handleSubmit)}>
      <TextInput label="Name" {...form.getInputProps('name')} withAsterisk />
      <TextInput label="Description" {...form.getInputProps('description')} />
      <NumberInput label="Ability Rating" min={0} max={10} {...form.getInputProps('abilityRating')} />
      <NumberInput label="Tilt Control" min={0} max={10} {...form.getInputProps('tiltControl')} />
      <Textarea label="Mental Description" {...form.getInputProps('mentalDescription')} />
      <TextInput label="Visual Description" {...form.getInputProps('visualDescription')} />
      <TextInput label="Image URL" {...form.getInputProps('image')} />
      <TextInput label="Favourite Hands" {...form.getInputProps('favouriteHands')} />

      <TagsInput
        label="Tags"
        value={(form.values.playerTags || []).map((pt) =>
          availableTags.find((tag) => tag.id === pt.tagId)?.name || pt.tag?.name || ''
        )}
        onChange={(selectedTags) => {
          const playerTags = selectedTags.map((tagName) => {
            const tag = availableTags.find((t) => t.name === tagName);
            if (!tag) {
              const createdTagName = handleNewTag(tagName); // Track the new tag locally
              return { tag: { name: createdTagName }, playerId: player ? player.id : 0 };
            }
            return { tag: { name: tagName }, tagId: tag.id, playerId: player ? player.id : 0 };
          });
          form.setFieldValue('playerTags', playerTags); // Update playerTags in the form
        }}
        data={availableTags.map((tag) => ({ value: tag.name, label: tag.name }))}
        placeholder="Enter Tag"
      />

      <Group position="right" mt="md">
        <Button type="submit">{player && player.id ? 'Update Player' : 'Add Player'}</Button>
      </Group>
    </form>
  );
};

export default PlayerForm;
