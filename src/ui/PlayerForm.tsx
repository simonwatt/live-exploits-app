import React, { useEffect, useState } from 'react';
import { useForm } from '@mantine/form';
import { Autocomplete, TagsInput, TextInput, Textarea, Select, Group, Button, Grid, Rating, Text, Divider, Badge, MultiSelect } from '@mantine/core';
import { IconFish, IconUser, IconUserCircle, IconFaceId, IconFaceMask, IconMoodSmile } from '@tabler/icons-react';
import dayjs from 'dayjs';
import { usePlayerContext } from '../contexts/PlayerContext';
import apiClient from '../utils/apiClient';

const PlayerForm = ({ player, isViewMode, onBack }) => {  
  const { state, savePlayer } = usePlayerContext();
  const { tags } = state;

  const [availableTags, setAvailableTags] = useState(tags);
  const [newTags, setNewTags] = useState([]);

  const form = useForm({
    initialValues: {
      id: 0,
      name: '',
      description: '',
      abilityRating: 0,
      tiltControl: 0,
      mentalDescription: '',
      visualDescription: '',
      image: '',
      favouriteHands: '',
      playerTags: [],
      ethnicity: '',
      skinColor: '',
      age: '',
      hairStyle: '',
      hairColor: '',
      gender: '',
      bodyType: '',
      height: '',
      avatar: '', // Added avatar field
      createdBy: '',
      createdAt: new Date(),
      updatedAt: new Date(),
      updatedBy: '',
    },
    validate: {
      name: (value) => (value.trim().length > 0 ? null : 'Name is required'),
    },
  });

  useEffect(() => {
    if (player && player.id !== form.values.id) {
      form.setValues(player);
    } else {
      form.reset();
      setNewTags([]);
    }
  }, [player?.id]);

  const handleSubmit = async (values) => {
    try {
      const filteredNewTags = newTags.filter((tagName) =>
        values.playerTags.some((pt) => pt.tag.name === tagName)
      );

      const createdTags = await Promise.all(
        filteredNewTags.map(async (tagName) => {
          const response = await apiClient.post('/tag', { name: tagName });
          return response.data;
        })
      );

      const updatedTags = [...availableTags, ...createdTags];
      setAvailableTags(updatedTags);

      const playerTags = values.playerTags.map((pt) => {
        const tag = updatedTags.find((t) => t.name === pt.tag.name);
        return tag ? { tagId: tag.id, playerId: values.id } : pt;
      });

      const updatedPlayer = { ...values, playerTags };

      const response = player && player.id
        ? await apiClient.put(`/player/${player.id}`, updatedPlayer)
        : await apiClient.post('/player', updatedPlayer);

      savePlayer(response.data);
      alert('Player saved successfully');
    } catch (error) {
      console.error('Error saving player:', error);
      alert('An error occurred while saving the player.');
    }
  };

  const handleNewTag = (tagName) => {
    if (!newTags.includes(tagName)) {
      setNewTags([...newTags, tagName]);
    }
    return tagName;
  };

// Avatar options
const avatarOptions = [
  { value: '🐟', label: 'Fish 🐟' },
  { value: '🦈', label: 'Shark 🦈' },
  { value: '🐳', label: 'Whale 🐳' },
  { value: '🐐', label: 'GOAT 🐐' },
  { value: '🐴', label: 'Donkey 🐴' },
  { value: '🧢', label: 'Cap 🧢' },
  { value: '🤡', label: 'Clown 🤡' },
  { value: '💰', label: 'Money bag 💰' },
  { value: '🎲', label: 'Dice 🎲' },
  { value: '🔥', label: 'Fire 🔥' },
  { value: '😎', label: 'Cool face 😎' },
  { value: '🤔', label: 'Thinking face 🤔' },
  { value: '🧠', label: 'Brain 🧠' },
  { value: '🐢', label: 'Turtle 🐢' },
  { value: '👤', label: 'Neutral face 👤' },
  { value: '🎩', label: 'Top hat 🎩' },
  {value: '☕', label:'Coffee ☕'},
  { value: '😈', label: 'Smiling Devil 😈' },
  { value: '👿', label: 'Angry Devil 👿' },
  { value: '👨‍🦳', label: 'White-haired man 👨‍🦳' },
  { value: '👩‍🦰', label: 'Red-haired woman 👩‍🦰' },
  { value: '👨‍🦱', label: 'Man with curly hair 👨‍🦱' },
  { value: '👩‍🦱', label: 'Woman with curly hair 👩‍🦱' },
  { value: '👨🏿', label: 'Man with dark skin 👨🏿' },
  { value: '👩🏽', label: 'Woman with medium skin 👩🏽' },
  { value: '👨🏻', label: 'Man with light skin 👨🏻' },
  { value: '👩🏾', label: 'Woman with dark skin 👩🏾' },
  { value: '👨‍🦲', label: 'Bald man 👨‍🦲' },
  { value: '👩‍🦲', label: 'Bald woman 👩‍🦲' },
  { value: '👳‍♂️', label: 'Man wearing turban 👳‍♂️' },
  { value: '👳‍♀️', label: 'Woman wearing turban 👳‍♀️' },
  { value: '🧔', label: 'Man with beard 🧔' },
  { value: '🤵', label: 'Man in tuxedo 🤵' },
  { value: '🤰', label: 'Pregnant woman 🤰' },
  { value: '👨🏾', label: 'Man with medium-dark skin 👨🏾' },
  { value: '👨🏽‍🦰', label: 'Man with red hair and medium skin 👨🏽‍🦰' },
  { value: '👩🏽‍🦳', label: 'Woman with gray hair and medium skin 👩🏽‍🦳' },
  { value: '👓', label: 'Person with glasses 👓' },
  {value: '👸', label: 'Princess 👸'}
];

const handleChange = (selected, form) => {
  const selectedOption = avatarOptions.find((option) => option.label === selected);
  const emoji = selectedOption ? selectedOption.value : selected;
  form.setFieldValue('avatar', emoji);
};

  return (
    <form onSubmit={form.onSubmit(handleSubmit)}>
   
      {player && (
        <Group direction="column" spacing="xs" mb="md">
          <Text size="xl" weight={500}>
            {form.values.name}
          </Text>
          <Text size="sm" color="dimmed">
            Added by {form.values.createdBy} on {dayjs(form.values.createdAt).format('MMMM D, YYYY h:mm A')}
          </Text>
          {form.values.updatedBy && form.values.updatedAt && (
            <Text size="sm" color="dimmed">
              Updated by {form.values.updatedBy} on {dayjs(form.values.updatedAt).format('MMMM D, YYYY h:mm A')}
            </Text>
          )}
        </Group>
      )}

      {!player && (
        <Group direction="column" spacing="xs" mb="md">
          <Text size="xl" weight={500}>
            Add New Player
          </Text>
        </Group>
      )}

      {/* Ability and Tilt Control */}
      <Grid>
        <Grid.Col span={6}>
          <TextInput description="The players name" label="Name" {...form.getInputProps('name')} withAsterisk />
        </Grid.Col>

        <Grid.Col span={6}>
        <Autocomplete
  label="Avatar"
  description="Choose Icon or enter up to 2 characters."
  maxLength={3}
  data={avatarOptions.map(({ label }) => label)} // Only show labels in dropdown
  onChange={(selected) => handleChange(selected, form)}
  value={form.values.avatar} // Display only emoji in input field
  placeholder="Pick an avatar or type"
  searchable
/>
        </Grid.Col>

        <Grid.Col span={12}>
          <Textarea
            label="Description"
            description="This is a general description of the player (it's recommended you instead use the player notes feature for specific tells and player exploits) "
            {...form.getInputProps('description')}
          />
        </Grid.Col>

        <Grid.Col span={6}>
          <Group>
            <Text>Ability</Text>
            <Rating
              label="Ability Rating"
              value={form.values.abilityRating}
              fractions={2}
              onChange={(value) => form.setFieldValue('abilityRating', value)}
            />
          </Group>
        </Grid.Col>

        <Grid.Col span={6}>
          <Group>
            <Text>Mental Game</Text>
            <Rating
              label="Tilt Control"
              value={form.values.tiltControl}
              fractions={2}
              onChange={(value) => form.setFieldValue('tiltControl', value)}
            />
          </Group>
        </Grid.Col>
      </Grid>

      {/* Favourite Hands Section */}
      <Grid>
        <Grid.Col span={6}>
          <TextInput
            label="Favourite Hands"
            {...form.getInputProps('favouriteHands')}
            placeholder="e.g., AA, AK suited"
            maxLength={20}
          />
        </Grid.Col>

        <Grid.Col span={6}>
          {/* Tags Input */}
          <TagsInput
          label="Tags"
            value={(form.values.playerTags || []).map((pt) =>
              availableTags.find((tag) => tag.id === pt.tagId)?.name || pt.tag?.name || ''
            )}
            onChange={(selectedTags) => {
              const playerTags = selectedTags.map((tagName) => {
                const tag = availableTags.find((t) => t.name === tagName);
                if (!tag) {
                  const createdTagName = handleNewTag(tagName);
                  return { tag: { name: createdTagName }, playerId: player ? player.id : 0 };
                }
                return { tag: { name: tagName }, tagId: tag.id, playerId: player ? player.id : 0 };
              });
              form.setFieldValue('playerTags', playerTags);
            }}
            data={availableTags.map((tag) => ({ value: tag.name, label: tag.name }))}
            placeholder="Enter Tag"
          />
        </Grid.Col>
      </Grid>

      {/* Mental Notes Section */}
      <Grid>
        <Grid.Col span={12}>
          <Textarea
            description="Enter notes about the player's tilt control, etc."
            label="Mental Description"
            {...form.getInputProps('mentalDescription')}
          />
        </Grid.Col>
      </Grid>

      {/* Visual Description Section */}
      <Divider label="Appearance" my="md" />
      <Text size="sm" color="dimmed">
        Enter distinguishing features to help identify who this player is. Tattoos, jewelry, etc.
      </Text>

      <Grid>
        <Grid.Col span={12}>
          <Textarea label="Physical Description" {...form.getInputProps('visualDescription')} />
        </Grid.Col>
      </Grid>

      <Grid>
        <Grid.Col span={6}>
          <Autocomplete
            label="Ethnicity"
            data={[
              'African',
              'Asian',
              'Australian',
              'Caucasian',
              'Chinese',
              'Euro',
              'German',
              'Hispanic',
              'Indian',
              'Latin/Latino',
              'NZ/Kiwi',
              'Korean',
              'Māori',
              'Middle Eastern',
              'Pacific Islander',
              'South American',
              'US/Canadian',
            ]}
            searchable
            {...form.getInputProps('ethnicity')}
          />
        </Grid.Col>
        <Grid.Col span={6}>
          <Autocomplete
            label="Skin Color"
            data={['White', 'Fair', 'Light', 'Medium', 'Olive', 'Brown', 'Dark']}
            searchable
            {...form.getInputProps('skinColor')}
          />
        </Grid.Col>
      </Grid>

      <Grid>
        <Grid.Col span={6}>
          <TextInput label="Age" {...form.getInputProps('age')} />
        </Grid.Col>

        <Grid.Col span={6}>
          <Autocomplete
            label="Gender"
            data={['Male', 'Female', 'Non-binary']}
            searchable
            {...form.getInputProps('gender')}
          />
        </Grid.Col>
      </Grid>

      <Grid>
        <Grid.Col span={6}>
          <Autocomplete
            label="Hair Color"
            data={['Black', 'Blonde', 'Brown', 'Gray', 'Ginger', 'Platinum', 'Red', 'White']}
            searchable
            {...form.getInputProps('hairColor')}
          />
        </Grid.Col>

        <Grid.Col span={6}>
          <Autocomplete
            label="Hair Style"
            data={['Bald', 'Buzz Cut', 'Curly', 'Long', 'Messy','Short', 'Slicked Back', 'Straight', 'Wavy']}
            searchable
            {...form.getInputProps('hairStyle')}
          />
        </Grid.Col>
      </Grid>

      <Grid>
        <Grid.Col span={6}>
          <Autocomplete
            label="Body Type"
            data={['Slim', 'Average', 'Athletic', 'Muscular', 'Fat']}
            searchable
            {...form.getInputProps('bodyType')}
          />
        </Grid.Col>
        <Grid.Col span={6}>
          <Autocomplete
            label="Height"
            data={['Short', 'Average', 'Tall']}
            searchable
            {...form.getInputProps('height')}
          />
        </Grid.Col>
      </Grid>

      {/* Submit Button */}
      {!isViewMode && (
        <Group position="right" mt="md">
          <Button type="submit">
            {player && player.id ? 'Update Player' : 'Add Player'}
          </Button>
        </Group>
      )}
    </form>
  );
};

export default PlayerForm;
