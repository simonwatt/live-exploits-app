import React, { createContext, useReducer, useContext, useEffect } from 'react';
import apiClient from '../utils/apiClient'; 

// Define action types
const SET_PLAYERS = 'SET_PLAYERS';
const ADD_PLAYER = 'ADD_PLAYER';
const UPDATE_PLAYER = 'UPDATE_PLAYER';
const SET_TAGS = 'SET_TAGS';

// Initial state
const initialState = {
  players: [],
  tags: [],
  tagsLoaded: false,
};

// Reducer function
const playerReducer = (state, action) => {
  switch (action.type) {
    case SET_PLAYERS:
      return { ...state, players: action.payload };
    case ADD_PLAYER:
      return {
        ...state,
        players: [...state.players, action.payload].sort((a, b) => a.name.localeCompare(b.name)),
      };
    case UPDATE_PLAYER:
      return {
        ...state,
        players: state.players.map((p) => (p.id === action.payload.id ? action.payload : p)),
      };
    case SET_TAGS:
      return { ...state, tags: action.payload, tagsLoaded: true };
    default:
      return state;
  }
};

// Create the PlayerContext
const PlayerContext = createContext(null);


// PlayerProvider component
export const PlayerProvider = ({ children }) => {
  const [state, dispatch] = useReducer(playerReducer, initialState);

  // Fetch players from the API
  const fetchPlayers = async () => {
    try {
      const response = await apiClient.get('/player');  // No need to specify the full URL
      dispatch({ type: SET_PLAYERS, payload: response.data.sort((a, b) => a.name.localeCompare(b.name)) });
    } catch (error) {
      console.error('Error fetching players:', error);
    }
  };

  // Fetch tags from the API
  const fetchTags = async () => {
    try {
      const response = await apiClient.get('/tag');  // No need to specify the full URL
      dispatch({ type: SET_TAGS, payload: response.data });
    } catch (error) {
      console.error('Error fetching tags:', error);
    }
  };

  useEffect(() => {
    fetchPlayers();
    fetchTags();
  }, []);

  // Function to save a player (either add or update)
  const savePlayer = async (player) => {
    try {
      if (player.id) {
        await apiClient.put(`/player/${player.id}`, player);  // No need to specify the full URL
        dispatch({ type: UPDATE_PLAYER, payload: player });
      } else {
        const response = await apiClient.post('/player', player);  // No need to specify the full URL
        dispatch({ type: ADD_PLAYER, payload: response.data });
      }
    } catch (error) {
      console.error('Error saving player:', error);
    }
  };

  return (
    <PlayerContext.Provider value={{ state, fetchPlayers, savePlayer }}>
      {children}
    </PlayerContext.Provider>
  );
};

// Custom hook to use the PlayerContext
export const usePlayerContext = () => {
  const context = useContext(PlayerContext);
  if (!context) {
    throw new Error('usePlayerContext must be used within a PlayerProvider');
  }
  return context;
};
